<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[阻塞/非阻塞、同步/异步和并行/并发的分析与理解]]></title>
    <url>%2F2018%2F04%2F11%2Ftest%2F</url>
    <content type="text"><![CDATA[引言面试中被问到了同步异步、并发并行的概念，发现自己没法清晰地表达出它们的区别，因此通过别人的博客结合相关书籍重新学习了一下这几个概念。 一，阻塞与非阻塞首先，阻塞这个概念来源于操作系统中进程/线程的状态模型中，进程因创建而存在，因撤销而消亡，在它的生命周期中，由于内因和外因的影响会呈现不同的状态，如下图：一般地，进程具有三种基本状态：运行态、就绪态和阻塞态。 运行态(Running)：进程已获得必要的资源，并占有处理机，处理机正在执行该进程的程序。 就绪态(Ready)：进程等待系统为其分配CPU，而CPU被其他进程占用，所以暂时不能运行，但此时进程已具备了执行的所有条件。 阻塞态(Blocked)：也可称为等待态、挂起态或睡眠态等，此时进程因等待某个事件而暂时不能运行，例如等待某个I/O事件的完成，或等待使用某个资源等。引起进程阻塞的原因有很多，系统将根据不同的阻塞原因将进程插入某个相应的阻塞队列中。 其次在网络编程中的I/O模型中有阻塞式I/O和非阻塞式I/O的概念。Richard Stevens的《Unix网络编程卷1：套接字联网API》详细介绍了阻塞式I/O和非阻塞式I/O： 阻塞式I/O：进程调用一个I/O函数，等待数据准备好，如果数据一直没有准备好，函数一直等待…，数据准备好了，从内核拷贝到用户空间，I/O函数返回成功指示。等待数据的过程中进程的状态即为阻塞。 非阻塞式I/O：非阻塞式I/O跟阻塞式I/O相对，在等待数据的过程中，该函数不会阻塞进程，而是会立即返回。 因此，可以给出阻塞与非阻塞的定义： 阻塞：阻塞调用是指调用结果返回之前，当前线程会被挂起（线程进入非可执行状态，在这个状态下，cpu不会给线程分配时间片，即线程暂停运行）。函数只有在得到结果之后才会返回。 非阻塞：非阻塞和阻塞的概念相对应，指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回。 这里举个取快递的例子帮助理解阻塞与非阻塞： 阻塞：比如到你某个时候到A楼一层（假如是内核缓冲区）取快递，但是你不知道快递什么时候过来，你又不能干别的事，只能死等着。但你可以睡觉（进程处于休眠状态），因为你知道快递把货送来时一定会给你打个电话（假定一定能叫醒你）。 非阻塞：当快递没到的时候，非阻塞方式会采用轮询的方式，你不必一直等待，可以去做其他的事情，但每隔一段时间到A楼一层(内核缓冲区）去看快递来了没有。如果没来，立即返回。而快递来了，就放在A楼一层，等你去取。 二，同步与异步同步与异步的概念比较好理解， 同步：同步进程之间的关系不是相互排斥临界资源的关系，而是相互依赖的关系。进一步的说明：就是前一个进程的输出作为后一个进程的输入，当第一个进程没有输出时第二个进程必须等待。具有同步关系的一组并发进程相互发送的信息称为消息或事件。简而言之就是说任务队列顺序执行，前一个任务未完成，后一个任务保持等待！ 异步：异步和同步是相对的，同步就是顺序执行，执行完一个再执行下一个，需要等待、协调运行。异步就是彼此独立,在等待某事件的过程中继续做自己的事，不需要等待这一事件完成后再工作。线程就是实现异步的一个方式。异步是让调用方法的主线程不需要同步等待另一线程的完成，从而可以让主线程干其它的事情。异步和多线程并不是一个同等关系,异步是最终目的,多线程只是我们实现异步的一种手段。异步是当一个调用请求发送给被调用者,而调用者不用等待其结果的返回而可以做其它的事情。实现异步可以采用多线程技术或则交给另外的进程来处理。 阻塞/非阻塞和同步/异步的概念比较相近，不容易区分，这里给出一个例子帮助理解： 小王爱喝茶，要喝茶的话需要买茶叶，烧开水，小王想出了如下几种办法来达到喝茶的目的。1. 小王让他老婆去商店买茶叶，等茶叶买回来之后再开始烧水，等水开了之后泡茶叶喝茶。（同步阻塞）2. 小王还是先等茶叶买回来再烧水，不过这次他没有干等，而是去看电视了，隔一会看下茶叶有没有买回来（水有没有开）。（同步非阻塞）3. 小王在他老婆去买茶叶的时候自己开始烧水，当然了，他会一直看着水开或者等茶叶买回来。（异步阻塞）4. 小王采用终极模式，老婆去买茶叶，自己把水烧上，然后去看电视，隔段时间看看事情有没有办完。（异步非阻塞） 这里所谓阻塞/非阻塞，其实是对于小王（进程）来说的，一直等待茶叶买回来、水开的小王处于阻塞状态，而去看电视时不时检查事件是否完成的小王处于非阻塞状态。同步/异步是对于事件（函数/系统调用）而言，买回来茶叶再烧水是同步操作，买茶叶跟烧水一起进行是异步操作。 三，并行与并发并行与并发更好理解了^_^ 并发：并发是多个程序在一个CPU上运行，CPU在多个程序之间快速切换，微观上不是同时运行，任意一个时刻只有一个程序在运行，但因为CPU切换速度非常快，宏观上看起来就像多个程序同时运行一样。 并行：在单处理器中多道程序设计系统中，进程被交替执行，表现出一种并发的外部特种；在多处理器系统中，进程不仅可以交替执行，而且可以重叠执行。在多处理器上的程序才可实现并行处理。从而可知，并行是针对多处理器而言的。并行是同时发生的多个并发事件，具有并发的含义，但并发不一定并行，也亦是说并发事件之间不一定要同一时刻发生。 四，总结这三个概念对其实针对的是不同的场景，但有些时候定义是有交叉的，真正想理解的话最好在代码业务的基础上进行分析，希望这篇文章能让你有个基本的了解。 参考链接https://blog.csdn.net/leyangjun/article/details/62236241https://blog.csdn.net/hguisu/article/details/7453390https://www.cnblogs.com/keyi/p/6710194.htmlhttps://blog.csdn.net/bryant_liu24/article/details/55506029https://blog.csdn.net/sinat_35512245/article/details/53836580]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F11%2F30%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
